//---------------------------------------------------------------------------------------------
import org.bonitasoft.engine.form.FormMapping
import org.bonitasoft.engine.form.FormMappingTarget
import org.bonitasoft.engine.form.FormMappingType
import org.bonitasoft.engine.search.SearchOptionsBuilder

import com.bonitasoft.engine.api.APIAccessor
import com.bonitasoft.engine.api.ProcessAPI

String operation= {{operation;
    type:select;
    listoptions:Only Detection,Update forms;
    default:Only Detection
}}

String scope= {{scope;
    type:select;
    listoptions:Forms and Overview,Only forms;
    default:Only forms
}}

List listFormIdTaskAuto = {{formIdTaskAuto;
    type:sql;
    sqlrequest:all:SELECT id FROM page WHERE name = 'custompage_taskAutogeneratedForm';
    selecttop:1
    }}
List listFormIdProcAuto  = {{formIdProcAuto;
    type:sql;
    sqlrequest:all:SELECT id FROM page WHERE name = 'custompage_processAutogeneratedForm';
    selecttop:1
    }}

List listFormIdOverviewAuto   = {{formIdOverviewAuto;
    type:sql;
    sqlrequest:all:SELECT id FROM page WHERE name = 'custompage_caseoverview';
    selecttop:1
    }}

formIdTaskAuto = listFormIdTaskAuto.size()>0 ? listFormIdTaskAuto.get(0).get("ID") : null;
formIdProcAuto = listFormIdProcAuto.size()>0 ? listFormIdProcAuto.get(0).get("ID") : null;
formIdOverviewAuto = listFormIdOverviewAuto.size()>0 ? listFormIdOverviewAuto.get(0).get("ID") : null;

StringBuffer result = new StringBuffer();

result.append("DisableFormV6: formIdTaskAuto:["+formIdTaskAuto+"] formIdProcAuto:["+formIdProcAuto+"] formIdOverviewAuto:["+formIdOverviewAuto+"] scope=["+scope+"] <br>");

ProcessAPI processAPI = apiAccessor.getProcessAPI();
List < FormMapping > formMappings = processAPI.searchFormMappings(
new SearchOptionsBuilder(0, 1000).done()).getResult();

int countFormUpdated=0;
for (FormMapping f: formMappings) {
  
  if (f.getTarget().equals(FormMappingTarget.LEGACY)) {
      String typeForm = f.getType().toString();
     result.append("Form LEGACY ["+f.getId()+"] Type:["+typeForm+"]");
    Long formId = null;
    if (f.getType().equals( FormMappingType.TASK )) {
        formId = formIdTaskAuto;
        result.append(" Task["+f.getTask() +"]");
    } else if (f.getType().equals( FormMappingType.PROCESS_START)) { 
        formId = formIdProcAuto;
        result.append("ProcessStart");
    } else if (f.getType().equals(FormMappingType.PROCESS_OVERVIEW)) {
        // do not manage  the overview
        result.append("ProcessOverview ");
        if ("Only forms".equals(scope)) {
            result.append("Overview ignored;");
            result.append("<br>");
            continue; 
        }
        formId = formIdOverviewAuto;
    }
    if ("Update forms".equals(operation )) {
        try {
            processAPI.updateFormMapping(f.getId(), null, formId);
            countFormUpdated++;
            result.append("Updated");
        } catch(Exception e) 
        {
            result.append("Error "+e.getMessage());
        }
    }
    else {
        countFormUpdated++;
        result.append("Detected");
    }
    result.append("<br>");
  }
}
result.append("Number of LEGACY form in scope : "+countFormUpdated+"<br>");
return result.toString();